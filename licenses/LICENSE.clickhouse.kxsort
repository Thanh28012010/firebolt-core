/* Most significant digit radix sort
 * Is not stable, but allows partial sorting.
 * And it's more cache-friendly and usually faster than LSD variant.
 *
 * NOTE: It's beneficial over std::partial_sort only if limit is above ~2% of size for 8 bit radix.
 * NOTE: When lowering down limit to 1%, the radix of 4..6 or 10..12 bit started to become beneficial.
 * For less than 1% limit, it's not recommended to use.
 * NOTE: For huge arrays without limit, the radix 11 suddenly becomes better... but not for smaller arrays.
 * Maybe it because histogram will fit in half of L1d cache (2048 * 4 = 16384).
 *
 * Based on https://github.com/voutcn/kxsort, license:
 * The MIT License
 * Copyright (c) 2016 Dinghua Li <voutcn@gmail.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */